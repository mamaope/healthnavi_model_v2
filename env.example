# HealthNavi AI CDSS - Environment Configuration
# Copy this file to .env and update the values

# Application Settings
ENV=development
LOG_LEVEL=INFO

# Security Keys (Generate secure random keys for production)
SECRET_KEY=your-super-secure-secret-key-min-32-characters-long
ENCRYPTION_KEY=your-encryption-key-for-sensitive-data-32-chars

# Database Configuration
DB_USER=healthnavi_user
DB_PASSWORD=SecurePass123!
DB_HOST=db
DB_PORT=5432
DB_NAME=healthnavi_cdss
DATABASE_URL=postgresql://healthnavi_user:SecurePass123!@db:5432/healthnavi_cdss

# Email Configuration
# SMTP Server Settings
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your-email@gmail.com
SMTP_PASSWORD=your-app-password
SMTP_USE_TLS=true
SMTP_USE_SSL=false

# Email Sender Information
FROM_EMAIL=noreply@healthnavi.ai
FROM_NAME=HealthNavi AI CDSS

# Application URLs
BASE_URL=http://localhost:8050

# Email Service Providers Configuration Examples:

# Gmail Configuration:
# SMTP_SERVER=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USERNAME=your-email@gmail.com
# SMTP_PASSWORD=your-app-password
# SMTP_USE_TLS=true
# SMTP_USE_SSL=false

# Outlook/Hotmail Configuration:
# SMTP_SERVER=smtp-mail.outlook.com
# SMTP_PORT=587
# SMTP_USERNAME=your-email@outlook.com
# SMTP_PASSWORD=your-password
# SMTP_USE_TLS=true
# SMTP_USE_SSL=false

# Yahoo Configuration:
# SMTP_SERVER=smtp.mail.yahoo.com
# SMTP_PORT=587
# SMTP_USERNAME=your-email@yahoo.com
# SMTP_PASSWORD=your-app-password
# SMTP_USE_TLS=true
# SMTP_USE_SSL=false

# Custom SMTP Server:
# SMTP_SERVER=your-smtp-server.com
# SMTP_PORT=587
# SMTP_USERNAME=your-username
# SMTP_PASSWORD=your-password
# SMTP_USE_TLS=true
# SMTP_USE_SSL=false

# Instructions for Gmail:
# 1. Enable 2-Factor Authentication on your Google account
# 2. Generate an App Password: https://myaccount.google.com/apppasswords
# 3. Use the App Password as SMTP_PASSWORD
# 4. Use your Gmail address as SMTP_USERNAME

# Instructions for Production:
# 1. Use a dedicated email service (SendGrid, Mailgun, AWS SES)
# 2. Set up proper SPF, DKIM, and DMARC records
# 3. Use environment-specific email templates
# 4. Implement email delivery monitoring and retry logic
# 5. Set up email bounce and complaint handling