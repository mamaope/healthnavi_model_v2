#!/usr/bin/env python3
"""
HealthNavi AI CDSS - Quick Setup Script

This script helps you set up the environment configuration for HealthNavi AI CDSS.
It creates a .env file with secure defaults and guides you through the setup process.
"""

import os
import secrets
import string
from pathlib import Path


def generate_secure_key(length=32):
    """Generate a cryptographically secure random key."""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(secrets.choice(alphabet) for _ in range(length))


def create_env_file():
    """Create .env file with secure defaults."""
    env_content = f"""# HealthNavi AI CDSS - Environment Configuration
# Generated by setup script - PLEASE REVIEW AND UPDATE AS NEEDED

# =============================================================================
# SECURITY CONFIGURATION (CRITICAL - GENERATED SECURE VALUES)
# =============================================================================

# JWT Secret Key - Generated secure key
SECRET_KEY={generate_secure_key(32)}

# Encryption Key for PHI data - Generated secure key
ENCRYPTION_KEY={generate_secure_key(32)}

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL Database Settings
DB_USER=healthnavi_user
DB_PASSWORD={generate_secure_key(16)}
DB_HOST=localhost
DB_PORT=5432
DB_NAME=healthnavi_cdss

# Database Connection Pool Settings
DB_POOL_SIZE=10
DB_MAX_OVERFLOW=20
DB_POOL_TIMEOUT=30

# =============================================================================
# GOOGLE CLOUD / VERTEX AI CONFIGURATION
# =============================================================================

# Google Cloud Project Settings
GCP_ID=your-gcp-project-id
GCP_LOCATION=us-central1

# Google Application Credentials (path to service account JSON file)
GOOGLE_APPLICATION_CREDENTIALS=path/to/your/service-account.json

# =============================================================================
# AZURE OPENAI CONFIGURATION
# =============================================================================

# Azure OpenAI Settings
AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com/
AZURE_OPENAI_API_KEY=your-azure-openai-api-key
API_VERSION=2024-02-01
DEPLOYMENT=text-embedding-3-large

# =============================================================================
# ZILLIZ/MILVUS VECTOR DATABASE CONFIGURATION
# =============================================================================

# Zilliz Cloud Settings
MILVUS_URI=https://your-cluster.zillizcloud.com
MILVUS_TOKEN=your-milvus-token
MILVUS_COLLECTION_NAME=medical_knowledge

# =============================================================================
# AWS S3 CONFIGURATION
# =============================================================================

# AWS Credentials
AWS_ACCESS_KEY_ID=your-aws-access-key-id
AWS_SECRET_ACCESS_KEY=your-aws-secret-access-key
AWS_REGION=us-east-1
AWS_S3_BUCKET=healthnavi-cdss

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

# Application Environment
ENV=development
DEBUG=true
LOG_LEVEL=INFO

# API Configuration
API_ROOT_PATH=/api/v2
API_HOST=0.0.0.0
API_PORT=8050

# CORS Configuration (for development)
CORS_ORIGINS=["http://localhost:3000", "http://localhost:8080"]
CORS_METHODS=["GET", "POST", "PUT", "DELETE", "OPTIONS"]
CORS_HEADERS=["*"]
CORS_CREDENTIALS=true

# =============================================================================
# SECURITY SETTINGS
# =============================================================================

# JWT Settings
JWT_ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=7

# Password Settings
MIN_PASSWORD_LENGTH=12
MAX_PASSWORD_LENGTH=128

# Rate Limiting
MAX_LOGIN_ATTEMPTS=5
LOGIN_LOCKOUT_MINUTES=15

# =============================================================================
# DATA LIMITS
# =============================================================================

# Input Validation Limits
MAX_PATIENT_DATA_LENGTH=10000
MAX_CHAT_HISTORY_LENGTH=50000
MAX_QUERY_LENGTH=2000

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# Log Settings
LOG_FORMAT=%(asctime)s [%(levelname)s] %(name)s: %(message)s
LOG_FILE=logs/healthnavi.log
LOG_MAX_SIZE=10485760
LOG_BACKUP_COUNT=5

# =============================================================================
# DOCKER COMPOSE OVERRIDES
# =============================================================================

# Docker Compose Database Settings (used by docker-compose.yml)
POSTGRES_DB=healthnavi_cdss
POSTGRES_USER=healthnavi_user
POSTGRES_PASSWORD={generate_secure_key(16)}
"""

    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("‚úÖ Created .env file with secure defaults")
    print("‚ö†Ô∏è  IMPORTANT: Please update the following values in .env:")
    print("   - GCP_ID: Your Google Cloud Project ID")
    print("   - GOOGLE_APPLICATION_CREDENTIALS: Path to your service account JSON")
    print("   - AZURE_OPENAI_ENDPOINT: Your Azure OpenAI endpoint")
    print("   - AZURE_OPENAI_API_KEY: Your Azure OpenAI API key")
    print("   - MILVUS_URI: Your Zilliz/Milvus URI")
    print("   - MILVUS_TOKEN: Your Zilliz/Milvus token")
    print("   - AWS_ACCESS_KEY_ID: Your AWS access key")
    print("   - AWS_SECRET_ACCESS_KEY: Your AWS secret key")


def create_directories():
    """Create necessary directories."""
    directories = ['logs', 'data', 'temp']
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ Created directory: {directory}")


def check_dependencies():
    """Check if required dependencies are installed."""
    try:
        import fastapi
        import sqlalchemy
        import pydantic
        print("‚úÖ Core dependencies are installed")
        return True
    except ImportError as e:
        print(f"‚ùå Missing dependency: {e}")
        print("Please run: pip install -r requirements.txt")
        return False


def main():
    """Main setup function."""
    print("üè• HealthNavi AI CDSS - Quick Setup")
    print("=" * 50)
    
    # Check if .env already exists
    if os.path.exists('.env'):
        response = input("‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("Setup cancelled.")
            return
    
    # Create directories
    print("\nüìÅ Creating directories...")
    create_directories()
    
    # Check dependencies
    print("\nüì¶ Checking dependencies...")
    if not check_dependencies():
        return
    
    # Create .env file
    print("\nüîê Creating environment configuration...")
    create_env_file()
    
    print("\nüéâ Setup complete!")
    print("\nüìã Next steps:")
    print("1. Update the .env file with your actual API keys and credentials")
    print("2. Run: docker-compose up -d")
    print("3. Check logs: docker-compose logs -f api")
    print("4. Access API docs: http://localhost:8050/docs")
    
    print("\n‚ö†Ô∏è  Security Reminders:")
    print("- Never commit .env file to version control")
    print("- Use strong, unique passwords in production")
    print("- Regularly rotate API keys and secrets")
    print("- Enable HTTPS in production")


if __name__ == "__main__":
    main()
