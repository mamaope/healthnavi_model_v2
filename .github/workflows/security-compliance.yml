name: HealthNavi AI CDSS - Security & Compliance Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scans

env:
  PYTHON_VERSION: '3.11'
  SECURITY_SCAN_ENABLED: true

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    if: env.SECURITY_SCAN_ENABLED == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json
        safety check --short-report
        
    - name: Run Bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json
        bandit -r app/ -ll
        
    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto app/ --json --output=semgrep-report.json
        semgrep --config=auto app/
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Black formatter
      run: |
        black --check app/
        
    - name: Run isort
      run: |
        isort --check-only app/
        
    - name: Run Flake8 linter
      run: |
        flake8 app/
        
    - name: Run MyPy type checker
      run: |
        mypy app/

  test-suite:
    name: Test Suite & Coverage
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_healthnavi
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run unit tests
      run: |
        pytest app/tests/ -v --cov=app --cov-report=xml --cov-report=html
        
    - name: Run integration tests
      run: |
        pytest app/tests/ -m integration -v
        
    - name: Run security tests
      run: |
        pytest app/tests/ -m security -v
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/

  compliance-check:
    name: Compliance & Standards Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Check HIPAA compliance
      run: |
        python scripts/check_hipaa_compliance.py
        
    - name: Check GDPR compliance
      run: |
        python scripts/check_gdpr_compliance.py
        
    - name: Check ISO 13485 compliance
      run: |
        python scripts/check_iso13485_compliance.py
        
    - name: Generate compliance report
      run: |
        python scripts/generate_compliance_report.py

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        
    - name: Run Safety check
      run: |
        safety check --json --output safety-deps.json
        safety check --short-report
        
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit.json
        pip-audit
        
    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-reports
        path: |
          safety-deps.json
          pip-audit.json

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t healthnavi-cdss:test .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'healthnavi-cdss:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  performance-test:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install locust pytest-benchmark
        
    - name: Run performance tests
      run: |
        pytest app/tests/ -m performance -v --benchmark-only
        
    - name: Run load tests
      run: |
        locust -f tests/load_test.py --headless -u 100 -r 10 -t 60s --html load-test-report.html
        
    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: |
          load-test-report.html
          .benchmarks/

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-scan, container-security]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download security artifacts
      uses: actions/download-artifact@v3
      with:
        name: security-reports
        
    - name: Download dependency artifacts
      uses: actions/download-artifact@v3
      with:
        name: dependency-reports
        
    - name: Generate security report
      run: |
        python scripts/generate_security_report.py
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.html

  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-scan, container-security]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify security team
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'Security scan failed on main branch. Please review immediately.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_SECURITY_WEBHOOK }}
